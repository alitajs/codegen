import { join } from 'path';

import { readFileSync } from 'fs';
import { strToKey, apiToName } from '../../utils/handelStr';

const GetMethodString = '{\n    params\n  }';
const PostMethodString = "{\n    method: 'POST',\n    data: params\n  }";

export function changeText(input: string) {
  if (input.includes('_')) {
    const texts = input.split('_');
    let str = texts.splice(0, 1)[0];
    texts.forEach(t => {
      str += toUpperCase(t);
    });
    return str;
  }
  return input;
}
let additionalParameters = {} as any;
export function changeApi(input: string) {
  const hasParams = input.includes('{');
  const nameArr = input.split('/');
  const newArr = nameArr.map(i => {
    let iStr = i;
    if (i.includes('{')) {
      const param = i.replace(new RegExp('{', 'g'), '').replace(new RegExp('}', 'g'), '');
      additionalParameters[param] = param;
      iStr = `\${params.${param}}`;
    }
    return iStr;
  });
  return hasParams ? `\`${newArr.join('/')}\`` : `'${newArr.join('/')}'`;
}
export function changeParam(nameArr: any[]) {
  const newArr = nameArr.map(i => {
    let iStr = i;
    if (i.includes('{')) {
      iStr = i.replace(new RegExp('{', 'g'), '').replace(new RegExp('}', 'g'), '');
    }
    return iStr;
  });
  return newArr;
}
export function generateName(api: string) {
  const nameArr = changeParam(api.split('/'));
  let name = nameArr[nameArr.length - 2]
    ? nameArr[nameArr.length - 2] + toUpperCase(nameArr[nameArr.length - 1])
    : nameArr[nameArr.length - 1];
  name = name.replace(/-/g, '_');
  return changeText(name);
}
export function toUpperCase(str: string) {
  return str.replace(str[0], str[0].toUpperCase());
}
export function generateType({ type, items, $ref }: any) {
  if (type === 'integer') {
    return 'number';
  }
  if (type === 'array') {
    if (items.$ref) {
      return `${generateInterfaceName(items.$ref)} []`;
    }
    if (items.type) {
      return `${items.type} []`;
    }
    return '[]';
  }
  if ($ref) {
    return generateInterfaceName($ref);
  }
  return type;
}
export function generateHead(data: any) {
  return `
/**
 * This file is automatically generated using Alitajs/codegen
 * Host: ${data.host}
 * BasePath: ${data.basePath}
 * Version: ${data.info.version}
 * Description: 这个文件是使用脚本自动生成的，原则上来说，你不需要手动修改它
 * Others:
**/
import request from 'umi-request';\n
`;
}
const hasChineseArr = {} as any;
let hasChineseCount = 0;
export function generatePromise(resData: any) {
  let promise = '';
  if (!resData) {
    return 'any';
  }
  if (resData.$ref) {
    promise = resData.$ref
      .replace('#/definitions/', '')
      .replace(new RegExp('«', 'g'), '')
      .replace(new RegExp('»', 'g'), '');
  } else if (resData.item) {
    promise = resData.item.$ref
      .replace('#/definitions/', '')
      .replace(new RegExp('«', 'g'), '')
      .replace(new RegExp('»', 'g'), '');
  } else if (resData.type) {
    promise = resData.type;
  }
  const hasChinese = /[^\u4e00-\u9fa5]+/.test(promise);
  if (!hasChinese) {
    if (hasChineseArr[promise]) {
      promise = hasChineseArr[promise];
    } else {
      hasChineseArr[promise] = `TemporaryVariable${hasChineseCount}`;
      promise = `TemporaryVariable${hasChineseCount}`;
      hasChineseCount += 1;
    }
  }
  if (resData.item) {
    promise += '[]';
  }
  return promise;
}
export function generateInterfaceName(text: string) {
  let input = text;
  input = input
    .replace('#/definitions/', '')
    .replace(new RegExp('«', 'g'), '')
    .replace(new RegExp('»', 'g'), '');
  const hasChinese = /[^\u4e00-\u9fa5]+/.test(input);
  if (!hasChinese) {
    if (hasChineseArr[input]) {
      input = hasChineseArr[input];
    } else {
      hasChineseArr[input] = `TemporaryVariable${hasChineseCount}`;
      input = `TemporaryVariable${hasChineseCount}`;
      hasChineseCount += 1;
    }
  }
  return changeText(input);
}
export function generateServiceFiles(SwaggerData: {
  tags?: never[] | undefined;
  paths: any;
  definitions: any;
}) {
  const { tags = [], paths, definitions } = SwaggerData;
  let outPutStr = generateHead(SwaggerData);
  /* 生成接口文件 */
  Object.keys(definitions).forEach(defItem => {
    outPutStr += `interface ${strToKey(generateInterfaceName(defItem))} {\n`;
    const properties = definitions[defItem].properties || {};
    Object.keys(properties).forEach(subDefItem => {
      let defItemStr = '   /**\n';
      defItemStr += `    * @description ${properties[subDefItem].description || ''}\n`;
      defItemStr += '    **/\n';
      defItemStr += `    ${subDefItem}: ${strToKey(generateType(properties[subDefItem]))};\n`;
      outPutStr += defItemStr;
    });
    outPutStr += '}\n';
  });
  /* 生成请求文件 */
  Object.keys(paths).forEach(item => {
    const itemData = paths[item];
    Object.keys(itemData).forEach(subItem => {
      additionalParameters = {};
      const subItemData = itemData[subItem];
      const { summary, description, tags: subTags, responses, parameters = [] } = subItemData;
      const resData = responses['200'] && responses['200'].schema;
      const url = changeApi(item);
      const name = apiToName(item, subItem);
      const params = `${toUpperCase(name)}Query`;
      const paramsMethod = subItem === 'get' ? GetMethodString : PostMethodString;
      let itemTargs = subTags || [];
      itemTargs = itemTargs.map((t: string) => {
        let tStr = t;
        tags.forEach((tag: { name: string; description: string }) => {
          if (tag.name === t) {
            tStr = tag.description;
          }
        });
        return tStr;
      });
      const promise = generatePromise(resData);

      let definition = `interface ${params} {\n`;
      parameters.map((p: { in: string; description: any; name: any; type: any }) => {
        if (p.in === 'query') {
          let pStr = '   /**\n';
          pStr += `    * @description ${p.description || ''}\n`;
          pStr += '    **/\n';
          pStr += `    ${p.name}: ${generateType(p)};\n`;
          definition += pStr;
          Object.keys(additionalParameters).map(ap => {
            let apStr = '   /**\n';
            apStr += '    * @description 请求地址中追加的参数\n';
            apStr += '    **/\n';
            apStr += `    ${ap}: string;\n`;
            definition += apStr;
            return ap;
          });
        }
        return p;
      });
      definition += '}\n';
      const tpl = join(__dirname, './http.ts.tpl');
      let tplContent = readFileSync(tpl, 'utf-8');
      tplContent = tplContent
        .replace('<%= InterfaceDefinition %>', definition)
        .replace('<%= FunctionTags %>', JSON.stringify(itemTargs))
        .replace('<%= FunctionSummary %>', summary)
        .replace('<%= FunctionDescription %>', description)
        .replace(new RegExp('<%= FunctionParams %>', 'g'), strToKey(params))
        .replace('<%= FunctionName %>', strToKey(name))
        .replace('<%= FunctionPromise %>', strToKey(promise))
        .replace('<%= FunctionUrl %>', url)
        .replace('<%= FunctionParamsMethod %>', paramsMethod);
      outPutStr += tplContent;
    });
  });
  const file = [{ fileName: 'api.ts', fileStr: outPutStr }];
  return file;
}
export default {
  outPath: 'src/services',
  handelData: generateServiceFiles,
};
